import { useState } from 'react';
import { useDongHoList } from '../../../hooks/useDongHoList';
import QuanlyButton from '../../ui/quanlyButton';

export default function WatchModels() {
  const { data: models, loading, error } = useDongHoList();
  const [showForm, setShowForm] = useState(false);

  const handleAdd = () => setShowForm(true);
  const closeForm = () => setShowForm(false);

  const handleEdit = (id) => {
    console.log('‚úèÔ∏è S·ª≠a model:', id);
  };

  const handleDelete = (id) => {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a model n√†y?')) {
      console.log('üóëÔ∏è X√≥a model:', id);
    }
  };

  return (
    <div>
      <h1 className="text-2xl font-bold mb-6">Qu·∫£n l√Ω Model ƒê·ªìng h·ªì</h1>

      <div className="flex justify-end mb-4">
        <button
          onClick={handleAdd}
          className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
        >
          ‚ûï Th√™m model
        </button>
      </div>

      {/* üü¶ Frame th√™m model */}
      {showForm && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl p-6 relative">
            <button
              onClick={closeForm}
              className="absolute top-2 right-2 text-gray-500 hover:text-red-500 text-xl"
            >
              ‚ùå
            </button>

            <h2 className="text-xl font-semibold mb-4">Th√™m model m·ªõi</h2>

            <form className="grid grid-cols-2 gap-4">
              <input type="text" placeholder="M√£ ƒë·ªìng h·ªì" className="p-2 border rounded" />
              <input type="text" placeholder="T√™n model" className="p-2 border rounded" />
              <input type="text" placeholder="Danh m·ª•c" className="p-2 border rounded" />
              <input type="text" placeholder="Ch·∫•t li·ªáu v·ªè" className="p-2 border rounded" />
              <input type="text" placeholder="Ch·∫•t li·ªáu d√¢y" className="p-2 border rounded" />
              <input type="text" placeholder="M√†u d√¢y" className="p-2 border rounded" />
              <input type="text" placeholder="ƒê∆∞·ªùng k√≠nh" className="p-2 border rounded" />
              <input type="text" placeholder="ƒê·ªô d√†y" className="p-2 border rounded" />
              <input type="text" placeholder="Ch·ªëng n∆∞·ªõc" className="p-2 border rounded" />
              <input type="text" placeholder="ƒê·ªông c∆°" className="p-2 border rounded" />
              <input type="text" placeholder="M·∫∑t s·ªë" className="p-2 border rounded" />
              <select className="p-2 border rounded">
                <option value="">Gi·ªõi t√≠nh</option>
                <option value="nam">Nam</option>
                <option value="nu">N·ªØ</option>
                <option value="unisex">Unisex</option>
              </select>
              <button
                type="submit"
                className="col-span-2 bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
              >
                üíæ L∆∞u model
              </button>
            </form>
          </div>
        </div>
      )}

      {/* üüß B·∫£ng model */}
      {loading && <p className="text-gray-500">ƒêang t·∫£i d·ªØ li·ªáu...</p>}
      {error && <p className="text-red-500">L·ªói: {error}</p>}

      {!loading && !error && (
        <div className="overflow-x-auto max-h-[500px] overflow-y-auto border rounded shadow">
          <table className="table-auto w-full text-left bg-white text-sm">
            <thead className="bg-gray-100 sticky top-0 z-10">
              <tr>
                <th className="p-3">M√£ ƒêH</th>
                <th className="p-3">T√™n Model</th>
                <th className="p-3">Danh m·ª•c</th>
                <th className="p-3">V·ªè</th>
                <th className="p-3">D√¢y</th>
                <th className="p-3">M√†u d√¢y</th>
                <th className="p-3">ƒê∆∞·ªùng k√≠nh</th>
                <th className="p-3">ƒê·ªô d√†y</th>
                <th className="p-3">N∆∞·ªõc</th>
                <th className="p-3">ƒê·ªông c∆°</th>
                <th className="p-3">M·∫∑t s·ªë</th>
                <th className="p-3">Gi·ªõi t√≠nh</th>
                <th className="p-3">H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {models.length > 0 ? (
                models.map((model) => (
                  <tr key={model.madongho} className="border-t hover:bg-gray-50">
                    <td className="p-3">{model.madongho}</td>
                    <td className="p-3">{model.tenmodel}</td>
                    <td className="p-3">{model.madanhmuc}</td>
                    <td className="p-3">{model.chatlieuvo}</td>
                    <td className="p-3">{model.chatlieuday}</td>
                    <td className="p-3">{model.mauday}</td>
                    <td className="p-3">{model.duongkinh}</td>
                    <td className="p-3">{model.doday}</td>
                    <td className="p-3">{model.chongnuoc}</td>
                    <td className="p-3">{model.dongco}</td>
                    <td className="p-3">{model.mausomatso}</td>
                    <td className="p-3 capitalize">{model.gioitinh}</td>
                    <td className="p-3">
                      <QuanlyButton
                        onEdit={() => handleEdit(model.madongho)}
                        onDelete={() => handleDelete(model.madongho)}
                      />
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="13" className="text-center text-gray-500 py-4">
                    Kh√¥ng c√≥ d·ªØ li·ªáu
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}
